# Copyright (c) 2015 Sean Quinn
# Licensed under the MIT License (http://opensource.org/licenses/MIT)
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice
# shall be included in all copies or substantial portions of
# the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
require "json"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# The name of the file used for configuration overrides.
VAGRANTFILE_JSON_PROPERTIES_OVERRIDE = "vagrant.json"

# Assign the default provider to be
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'


# Add "deep_merge" functionality to Hash
class ::Hash
    def deep_merge(second)
        merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : [:undefined, nil, :nil].include?(v2) ? v1 : v2 }
        self.merge(second, &merger)
    end
end


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "trusty64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"

  ###
  ### The default properties that will be used for parts of the VM configuration,
  ### this should contain all of the sensible defaults to the values which are
  ### exposed to users for overriding. The ports are the ports that the guest VM
  ### will forward TO on the host (e.g. the host ports that will be opened).
  ###
  props = {
    "ip"                    => "dhcp",    # The default IP address.
    "ports" => {
      "http"                => 80,        # The port for standard HTTP
      "http"                => 443,       # The port for standard HTTPS
    },
  }

  ###
  ### Check to see if the file exists, if it does attempt to open, read, and parse
  ### it. If it is parsed the contents will be merged with the default properties
  ### overriding them.
  ###
  if File::exists?(VAGRANTFILE_JSON_PROPERTIES_OVERRIDE)
    file = open(VAGRANTFILE_JSON_PROPERTIES_OVERRIDE)
    begin
      json = file.read
      overrides = JSON.parse(json)

      # Render the default properties to the console.
      print "\nDEFAULT PROPERTIES: \n"
      print props
      print "\n------------------------------------------------------------\n"

      # Render the overrides to the console.
      print "\nOVERRIDES: \n"
      print overrides
      print "\n------------------------------------------------------------\n"

      # Merge the properties.
      props = props.deep_merge(overrides)

      # Render the overrides to the console.
      print "\nMERGED PROPERTIES: \n"
      print props
      print "\n------------------------------------------------------------\n\n"
    rescue
      print "Vagrant encountered an error while attempting to parse: "+VAGRANTFILE_JSON_PROPERTIES_OVERRIDE
    ensure
      file.close unless file.nil?
    end
  end

  ### Create a private network, which allows host-only access to the machine
  ### using a specific IP.
  config.vm.network :private_network, ip: props["ip"]

  ### Host-to-Guest Port Forwarding
  config.vm.network :forwarded_port, guest: 80,    host: props["ports"]["http"]
  config.vm.network :forwarded_port, guest: 443,   host: props["ports"]["https"]

  ### Enables SSH access to the VM
  config.ssh.forward_agent = true

  ### VirtualBox Provider Configuration
  config.vm.provider :virtualbox do |vb|
    vb.gui = false
    vb.customize ["modifyvm", :id, "--memory", "512"]
  end

end
